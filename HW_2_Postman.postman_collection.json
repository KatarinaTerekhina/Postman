{
	"info": {
		"_postman_id": "5b8eb6e8-77e7-46dc-8408-aa8b143fb32a",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=Kitty&age=18",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Kitty"
						},
						{
							"key": "age",
							"value": "18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var req = request.data\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var resp = JSON.parse(responseBody)\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name c request \r",
							"pm.test(\"name response = name request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age c request \r",
							"pm.test(\"age response = age request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary c request \r",
							"pm.test(\"salary response = salary request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name request (name забрать из request.)\r",
							"pm.test(\"name request = name response\", function () {\r",
							"    pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age request (age забрать из request)\r",
							"pm.test(\"age request = age response\", function () {\r",
							"    pm.expect(req.age).to.eql(resp.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary request (salary забрать из request)\r",
							"pm.test(\"salary request = salary response\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.get(\"family\", jsonData.family);\r",
							"console.log(jsonData)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"pm.expect(req.salary*4).to.eql(resp.family.u_salary_1_5_year)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Kate&age=18&weight=65",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "weight",
							"value": "65"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Kate&age=18&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var url = require('url');\r",
							"//Спарсить response body в json\r",
							"var resp = JSON.parse(responseBody)\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var urlparse = url.parse(request.url, true);\r",
							"\r",
							"//Проверить, что name в ответе равно name c request \r",
							"pm.test(\"name response = name request\", function () {\r",
							"   pm.expect(resp.name).to.eql(urlparse.query.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"age response = age request\", function () {\r",
							"   pm.expect(resp.age).to.eql(urlparse.query.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary request (salary забрать из request)\r",
							"pm.test(\"salary response = salary request\", function () {\r",
							"   pm.expect(resp.salary).to.eql(parseInt(urlparse.query.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.get(\"family\", jsonData.family);\r",
							"console.log(jsonData)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog есть параметр name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.not.eql(undefined);\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dog есть параметр age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.not.eql(undefined);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Luky\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"dog age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "default",
							"disabled": true
						},
						{
							"key": "age",
							"value": "18",
							"type": "default",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "default",
							"disabled": true
						},
						{
							"key": "пвпвып",
							"value": "ыаыаыа\n",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Kate&age=18&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Импорт модуля для работы с url\r",
							"var url = require('url');\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var resp = JSON.parse(responseBody)\r",
							"\r",
							"//Спарсить request\r",
							"var urlparse = url.parse(request.url, true);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"name response = name request\", function () {\r",
							"   pm.expect(resp.name).to.eql(urlparse.query.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"age response = age request\", function () {\r",
							"   pm.expect(resp.age).to.eql(parseInt(urlparse.query.age));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"var reqSalary = url.parse(request.url, true);\r",
							"console.log(reqSalary.query.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(resp.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"salary response = salary request\", function () {\r",
							"   pm.expect(resp.salary[0]).to.eql(parseInt(urlparse.query.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"salary response = salary request x2\", function () {\r",
							"   pm.expect(parseInt(resp.salary[1])).to.eql(parseInt(urlparse.query.salary*2));\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"salary response = salary request x3\", function () {\r",
							"   pm.expect(parseInt(resp.salary[2])).to.eql(parseInt(urlparse.query.salary*3));\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"var name = pm.environment.get('name');\r",
							"if (!name) {\r",
							"    pm.environment.set('name', resp.name);\r",
							"};\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"var age = pm.environment.get('age');\r",
							"if (!age) {\r",
							"    pm.environment.set('age', resp.age);\r",
							"};\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"var salary = pm.environment.get('salary');\r",
							"if (!salary) {\r",
							"    pm.environment.set('salary', resp.salary);\r",
							"};\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"var salary = pm.environment.get('salary');\r",
							"for (let i = 0; i < salary.length; i++) {\r",
							"\tconsole.log(salary[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Kate&age=18&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Импорт модуля для работы с url\r",
							"var url = require('url');\r",
							"let jsonData = pm.response.json();\r",
							"var salary = pm.environment.get(\"salary\")\r",
							"var salary1 = salary.toString().split(\",\")[0]\r",
							"var salary2 = pm.environment.get('salary1');\r",
							"if (!salary2) {\r",
							"    pm.environment.set('salary1', salary1);\r",
							"};\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var resp = JSON.parse(responseBody)\r",
							"\r",
							"//Спарсить request\r",
							"var urlparse = url.parse(request.url, true);\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"start_qa_salary равен salary\", function () {\r",
							"   pm.expect(jsonData.start_qa_salary).to.eql(parseInt(request.data.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(request.data.salary*2));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7\", function () {\r",
							"   pm.expect(parseInt(jsonData.qa_salary_after_12_months)).to.eql(parseInt(request.data.salary*2.7));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function () {\r",
							"   pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(request.data.salary*3.3));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"   pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(request.data.salary*3.8));\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () {\r",
							"   pm.expect(jsonData[\"person\"][\"u_name\"][1]).to.eql(parseInt(request.data.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"u_age равен age из request\", function () {\r",
							"   pm.expect(jsonData[\"person\"][\"u_age\"]).to.eql(parseInt(request.data.age));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2\", function () {\r",
							"   pm.expect(parseInt(jsonData.person.u_salary_5_years)).to.eql(parseInt(request.data.salary*4.2));\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i in jsonData.person){\r",
							"    console.log(\"Объект:\", i, \"Значение объекта:\", jsonData.person[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		}
	]
}