{
	"info": {
		"_postman_id": "64e6abef-170f-4b2f-9957-e291ec2b0aed",
		"name": "HW_3_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse (responseBody)\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/login?login=Katarina&password=qwerty123",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Katarina"
						},
						{
							"key": "password",
							"value": "qwerty123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"структура json\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(parseInt(pm.environment.get('salary1'))*4);\r",
							"});\r",
							"pm.test(\"структура json age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_age).to.eql(pm.environment.get('age'));\r",
							"});\r",
							"pm.test(\"структура json name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[0]).to.eql(pm.environment.get('name'));\r",
							"});\r",
							"pm.test(\"структура json salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(pm.environment.get('salary1')));\r",
							"});\r",
							"pm.test(\"структура json age в массиве\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[2]).to.eql(pm.environment.get('age'));\r",
							"});\r",
							"pm.test(\"структура json: qa_salary_after_12_months\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json: qa_salary_after_6_months\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json: start_qa_salary\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.start_qa_salary).to.not.eql(undefined);\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var request = pm.request.url.query.all()\r",
							"pm.test(\"коэффициент умножения x 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(pm.environment.get('salary1'))*2);\r",
							"});\r",
							"pm.test(\"коэффициент умножения x 2.9\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseInt(pm.environment.get('salary1'))*2.9);\r",
							"});\r",
							"pm.test(\"коэффициент умножения x 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.person.u_salary_1_5_year).to.eql(parseInt(pm.environment.get('salary1'))*4);\r",
							"});\r",
							"\r",
							"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var jsonData = JSON.parse (responseBody)\r",
							"pm.environment.set(\"u_salary_1.5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": \"{{age}}\",\r\n\"salary\": \"{{salary1}}\",\r\n\"name\": \"{{name}}\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(18);\r",
							"});\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Kate\");\r",
							"});\r",
							"pm.test(\"salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(1500);\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(parseInt(3000));\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(parseInt(4500));\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"коэффициент умножения x 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(parseInt(jsonData.salary[1])).to.eql(request.data.salary*2);\r",
							"});\r",
							"pm.test(\"коэффициент умножения x 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(parseInt(jsonData.salary[2])).to.eql(request.data.salary*3);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"сравнение\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[2]>jsonData.salary[1]).to.be.true\r",
							"    pm.expect(jsonData.salary[2]>jsonData.salary[0]).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Kate",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"структура json age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(pm.environment.get('age'));\r",
							"});\r",
							"pm.test(\"структура json daily_food\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_food).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json daily_sleep\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_sleep).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get('name'));\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"коэффициенты умножения weight: daily_food x 0.012\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.daily_food).to.eql(request.data.weight*0.012);\r",
							"});\r",
							"pm.test(\"коэффициенты умножения weight: daily_sleep x 2.5\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.daily_sleep).to.eql(request.data.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "65",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"структура json: age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(parseInt(jsonData.age)).to.eql(pm.environment.get('age'));\r",
							"});\r",
							"pm.test(\"структура json: name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get('name'));\r",
							"});\r",
							"pm.test(\"структура json: salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(pm.environment.get('salary1')));\r",
							"});\r",
							"pm.test(\"структура json: family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.children[0]).to.eql([\"Alex\",24]);\r",
							"});\r",
							"pm.test(\"структура json: family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.children[1]).to.eql([\"Kate\", 12]);\r",
							"});\r",
							"pm.test(\"структура json: family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql((parseInt(pm.environment.get('salary1'))*4));\r",
							"});\r",
							"\r",
							"//Проверить, что значение поля name = значению переменной name из окружения\r",
							"pm.test(\"значение поля name = значению переменной name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.environment.get(\"name\")).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//Проверить что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"pm.test(\"значение поля age = значению переменной age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.environment.get(\"age\")).to.eql(parseInt(jsonData.age));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос\r",
							"var curr_code = pm.variables.replaceIn(Math.floor(Math.random() * (511-1) + 1))\r",
							"postman.setEnvironmentVariable('curr_code', curr_code);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"структура json Cur_Abbreviation\", function () {\r",
							"    pm.expect(jsonData.Cur_Abbreviation).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json Cur_ID\", function () {\r",
							"    pm.expect(jsonData.Cur_ID).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json Cur_Name\", function () {\r",
							"    pm.expect(jsonData.Cur_Name).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json Cur_OfficialRate\", function () {\r",
							"    pm.expect(jsonData.Cur_OfficialRate).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json Cur_Scale\", function () {\r",
							"    pm.expect(jsonData.Cur_Scale).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"структура json Date\", function () {\r",
							"    pm.expect(jsonData.Date).to.not.eql(undefined);\r",
							"});\r",
							"pm.test(\"Проверка всей структуры\", function () {\r",
							"    pm.expect(jsonData.Cur_Abbreviation).to.not.eql(undefined);\r",
							"    pm.expect(jsonData.Cur_ID).to.not.eql(undefined);\r",
							"    pm.expect(jsonData.Cur_Name).to.not.eql(undefined);\r",
							"    pm.expect(jsonData.Cur_OfficialRate).to.not.eql(undefined);\r",
							"    pm.expect(jsonData.Cur_Scale).to.not.eql(undefined);\r",
							"    pm.expect(jsonData.Date).to.not.eql(undefined);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}